Nome: Paulo Mitsuro Aoki Saito	RA: 1510013305	10º Semestre Eng. Computação

Case de Microservices – Netflix

A Netflix utiliza a AWS como plataforma de Cloud Computing. A empresa migrou de uma aplicação monolítica, que era um gigante projeto Java/Web que faziam deploy através de um único pacote WAR, para uma arquitetura com centenas de microservices.
As principais características para uma aplicação altamente disponível são:
  Decomposição em Microservices: Permitir que o acesso para usuário final esteja sempre disponível, de forma que se uma parte da aplicação falhar, o restante permaneça em funcionamento, não permitindo que a falha se espalhe no sistema como um todo. Há times que cuidam de todo o ciclo da aplicação, desde o desenvolvimento, ao deploy, e até a operação.
  Redundância e Latência: Todos os seus serviços devem estar rodando em diversos data centers, e em diversas regiões do mundo. Para isso a Netflix faz deploy dos recursos de Infraestrutura nas diversas AZs e Regiões da AWS.

Para conseguir isso, você pode utilizar alguns componentes do Netflix OSS, como:
  Eureka: O projeto Eureka, atua como um service registry, ele conhece todos os serviços e sabe o status de cada um (iniciando, em execução, fora do ar, etc.) e em que máquina, zona, região e IP que estão sendo executados.
  Karyon: O projeto funciona como uma dependência (java/jar) de cada um dos microservices e se encarrega dentre outras coisas de realizar o registro do microservice no Eureka, para que o microservice possa ser rapidamente e facilmente encontrado pelos outros serviços que precisarem dele.
  Ribbon Client: esse é o projeto open source responsável pelo client de IPC (Interprocess Communication), em outras palavras ele é responsável por realizar a comunicação entre os diversos microservices e fazer o balanceamento de carga (client side), suportando diversos protocolos (HTTP, TCP, UDP) inclusive para chamadas assíncronas e arquiteturas reativas. O Ribbon também faz o tratamento de uma eventual falha em uma chamada de um microservice. O Ribbon oferece diferentes implementações de LoadBalancer para que você utilizar.
  Hystrix: é outro projeto open source da Netflix, o trabalho dele é aplicar o famoso padrão de arquitetura circuit breaker. Quando um determinado microservice falhar, ele “abrirá o circuito” e direcionará as chamadas para um outro microservice que atuará como um fallback.

Uma arquitetura de microservices deve assumir que tudo que pode falhar cedo ou tarde vai falhar, por isso deve se prevenir para que a aplicação continue disponível mesmo em caso de falhas em alguns dos componentes da arquitetura, por isso Meshenberg fez questão de enfatizar em sua apresentação que o estado da aplicação (dados) deve estar apenas na camada de persistência (seja isso um banco de dados ou cache store como Memcached ou Redis), isso significa que você não poderá contar com estado em sessões de usuário (HTTP Session Store) nos servidores web.
Isso é importante porque se um desses servidores caírem, sua aplicação deverá continuar funcionando normalmente sem que o usuário note o que aconteceu. Sem contar que para um balanceamento de carga eficiente você nem sempre poderá contar que todas as requests de um usuário serão atendidas pelo mesmo servidor (no sticky session). Além de tudo, isso será um pré-requisito para que você faça atualizações da sua aplicação sem causar downtime (indisponibilidade).
Outro ponto importante para garantir a alta disponibilidade são os testes de falhas de recursos de infraestrutura. A Netflix faz testes de como a aplicação reage caso um microservice pare de responder, caso um servidor pare de responder, caso um data center inteiro pare responder e até caso uma região inteira da AWS pare de responder. Para isso utilizam o projeto Simian Army que oferece um conjunto de ferramentas para testar a segurança e os mecanismos de fail-over da sua aplicação. O Chaos Monkey por exemplo derruba instâncias aleatoriamente.
Ainda falando de alta disponibilidade, para garantir o deploy de aplicações sem downtime, a Netflix desenvolveu o Asgard que é um projeto open-source para gerenciar deploys (atualizações de versão). Com ele é possível realizar Canary e Red/Black Deploys, técnicas de deploy que permitem realizar atualizações de software sem causar downtime algum, ou seja, sem tirar a aplicação do ar, e ainda é possível fazer rollback para a versão anterior caso ocorra algum problema no meio do processo de deploy.
Aplicações de alta disponibilidade requerem uma arquitetura distribuída e a prova de falhas. A Netflix é pioneira nesse tipo de arquitetura e disponibiliza uma grande gama de projetos open source que podem ajudar você a construir uma aplicação assim.
